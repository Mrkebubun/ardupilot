List


find "Log" in  "*.cpp"
ArduPlane/is_flying.cpp:117:        Log_Write_Status();
ArduPlane/Log.cpp:316:void Plane::Log_Write_Status()
ArduPlane/ArduPlane.cpp:326:        Log_Write_Status();
ArduPlane/Log.cpp:573:void Plane::Log_Write_Status() {}
ArduPlane/system.cpp:733:          Log_Arm_Disarm();

ArduPlane/Parameters.cpp:784:    // @DisplayName: Log bitmask
ArduPlane/Parameters.cpp:785:    // @Description: Bitmap of what log types to enable in dataflash. 
   This values is made up of the sum of each of the log types you want to be saved on dataflash. 
   On a PX4 or Pixhawk the large storage size of a microSD card means it is usually best just to 
   enable all log types by setting this to 65535. 
   On APM2 the smaller 4 MByte dataflash means you need to be more selective in your logging
   or you may run out of log space while flying (in which case it will wrap and overwrite the start of the log).
   The individual bits are ATTITUDE_FAST=1, ATTITUDE_MEDIUM=2, GPS=4, PerformanceMonitoring=8, 
      ControlTuning=16, NavigationTuning=32, Mode=64, IMU=128, Commands=256, Battery=512, 
      Compass=1024, TECS=2048, Camera=4096, RCandServo=8192, Sonar=16384, Arming=32768, 
      LogWhenDisarmed=65536, FullLogsArmedOnly=65535, FullLogsWhenDisarmed=131071

ArduPlane/commands.cpp:107:        Log_Write_Home_And_Origin();
ArduPlane/commands.cpp:129:        Log_Write_Home_And_Origin();


ArduPlane/Log.cpp:75:    Log_Read(0, 1, 0);
ArduPlane/Log.cpp:83:    Log_Read((uint16_t)dump_log_num, dump_log_start, dump_log_end);

ArduPlane/Log.cpp:154:    gcs_send_text(MAV_SEVERITY_WARNING, "Log erase complete");
ArduPlane/Log.cpp:159:void Plane::Log_Write_Attitude(void)
ArduPlane/Log.cpp:161:    Vector3f targets;       // Package up the targets into a vector for commonality with Copter usage of Log_Wrote_Attitude
ArduPlane/Log.cpp:166:    DataFlash.Log_Write_Attitude(ahrs, targets);
ArduPlane/Log.cpp:167:    DataFlash.Log_Write_PID(LOG_PIDR_MSG, rollController.get_pid_info());
ArduPlane/Log.cpp:168:    DataFlash.Log_Write_PID(LOG_PIDP_MSG, pitchController.get_pid_info());
ArduPlane/Log.cpp:169:    DataFlash.Log_Write_PID(LOG_PIDY_MSG, yawController.get_pid_info());
ArduPlane/Log.cpp:170:    DataFlash.Log_Write_PID(LOG_PIDS_MSG, steerController.get_pid_info());
ArduPlane/Log.cpp:174:    DataFlash.Log_Write_EKF(ahrs,optflow.enabled());
ArduPlane/Log.cpp:176:    DataFlash.Log_Write_EKF(ahrs,false);
ArduPlane/Log.cpp:178:    DataFlash.Log_Write_AHRS2(ahrs);
ArduPlane/Log.cpp:181:    sitl.Log_Write_SIMSTATE(&DataFlash);
ArduPlane/Log.cpp:183:    DataFlash.Log_Write_POS(ahrs);
ArduPlane/Log.cpp:201:void Plane::Log_Write_Performance()
ArduPlane/Log.cpp:225:// do not add any extra log writes to this function; see LogStartup.cpp
ArduPlane/Log.cpp:226:bool Plane::Log_Write_Startup(uint8_t type)
ArduPlane/Log.cpp:250:void Plane::Log_Write_Control_Tuning()
ArduPlane/Log.cpp:268:void Plane::Log_Write_TECS_Tuning(void)
ArduPlane/Log.cpp:287:void Plane::Log_Write_Nav_Tuning()

ArduPlane/Log.cpp:346:void Plane::Log_Write_Sonar()
ArduPlane/Log.cpp:367:    DataFlash.Log_Write_RFND(rangefinder);
ArduPlane/Log.cpp:383:void Plane::Log_Write_Optflow()
ArduPlane/Log.cpp:411:void Plane::Log_Write_Current()
ArduPlane/Log.cpp:413:    DataFlash.Log_Write_Current(battery, channel_throttle->control_in);
ArduPlane/Log.cpp:416:    DataFlash.Log_Write_Power();
ArduPlane/Log.cpp:419:void Plane::Log_Arm_Disarm() {
ArduPlane/Log.cpp:429:void Plane::Log_Write_GPS(uint8_t instance)
ArduPlane/Log.cpp:431:    DataFlash.Log_Write_GPS(gps, instance, current_loc.alt - ahrs.get_home().alt);
ArduPlane/Log.cpp:434:void Plane::Log_Write_IMU() 
ArduPlane/Log.cpp:436:    DataFlash.Log_Write_IMU(ins);

ArduPlane/Log.cpp:441:    DataFlash.Log_Write_RCIN();
ArduPlane/Log.cpp:442:    DataFlash.Log_Write_RCOUT();
ArduPlane/Log.cpp:444:        DataFlash.Log_Write_RSSI(rssi);
ArduPlane/Log.cpp:448:void Plane::Log_Write_Baro(void)
ArduPlane/Log.cpp:450:    DataFlash.Log_Write_Baro(barometer);
ArduPlane/Log.cpp:454:void Plane::Log_Write_Airspeed(void)
ArduPlane/Log.cpp:456:    DataFlash.Log_Write_Airspeed(airspeed);
ArduPlane/Log.cpp:460:void Plane::Log_Write_Home_And_Origin()
ArduPlane/Log.cpp:466:        DataFlash.Log_Write_Origin(LogOriginType::ekf_origin, ekf_orig);
ArduPlane/Log.cpp:472:        DataFlash.Log_Write_Origin(LogOriginType::ahrs_home, ahrs.get_home());
ArduPlane/Log.cpp:476:static const struct LogStructure log_structure[] = {
ArduPlane/Log.cpp:503:void Plane::Log_Read(uint16_t list_entry, int16_t start_page, int16_t end_page)
ArduPlane/Log.cpp:511:	DataFlash.LogReadProcess(list_entry, start_page, end_page,
ArduPlane/Log.cpp:517:void Plane::Log_Write_Vehicle_Startup_Messages()
ArduPlane/Log.cpp:520:    Log_Write_Startup(TYPE_GROUNDSTART_MSG);
ArduPlane/Log.cpp:521:    DataFlash.Log_Write_Mode(control_mode);
ArduPlane/Log.cpp:528:    DataFlash.setVehicle_Startup_Log_Writer(
ArduPlane/Log.cpp:529:        FUNCTOR_BIND(&plane, &Plane::Log_Write_Vehicle_Startup_Messages, void)
ArduPlane/Log.cpp:532:    DataFlash.StartNewLog();

ArduPlane/Log.cpp:567:void Plane::Log_Write_Attitude(void) {}
ArduPlane/Log.cpp:568:void Plane::Log_Write_Performance() {}
ArduPlane/Log.cpp:569:void Plane::Log_Write_Startup(uint8_t type) {}
ArduPlane/Log.cpp:570:void Plane::Log_Write_Control_Tuning() {}
ArduPlane/Log.cpp:571:void Plane::Log_Write_TECS_Tuning(void) {}
ArduPlane/Log.cpp:572:void Plane::Log_Write_Nav_Tuning() {}
ArduPlane/Log.cpp:574:void Plane::Log_Write_Sonar() {}
ArduPlane/Log.cpp:577:void Plane::Log_Write_Optflow() {}
ArduPlane/Log.cpp:580:void Plane::Log_Write_Current() {}
ArduPlane/Log.cpp:581:void Plane::Log_Arm_Disarm() {}
ArduPlane/Log.cpp:582:void Plane::Log_Write_GPS(uint8_t instance) {}
ArduPlane/Log.cpp:583:void Plane::Log_Write_IMU() {}
ArduPlane/Log.cpp:439:void Plane::Log_Write_RC(void)
ArduPlane/Log.cpp:584:void Plane::Log_Write_RC(void) {}
ArduPlane/Log.cpp:585:void Plane::Log_Write_Baro(void) {}
ArduPlane/Log.cpp:586:void Plane::Log_Write_Airspeed(void) {}
ArduPlane/Log.cpp:587:void Plane::Log_Write_Home_And_Origin() {}
ArduPlane/Log.cpp:590:void Plane::Log_Read(uint16_t log_num, int16_t start_page, int16_t end_page) {}

ArduPlane/ArduPlane.cpp:160:       Log_Write_Attitude();
ArduPlane/ArduPlane.cpp:164:       Log_Write_IMU();

ArduPlane/ArduPlane.cpp:216:       DataFlash.Log_Write_Compass(compass);
ArduPlane/ArduPlane.cpp:247:       Log_Write_Attitude();
ArduPlane/ArduPlane.cpp:251:       Log_Write_IMU();
ArduPlane/ArduPlane.cpp:260:       Log_Write_Control_Tuning();
ArduPlane/ArduPlane.cpp:263:       Log_Write_Nav_Tuning();
ArduPlane/ArduPlane.cpp:266:       Log_Write_RC();

ArduPlane/ArduPlane.cpp:296:       Log_Write_Current();
ArduPlane/ArduPlane.cpp:341:       Log_Write_Performance();
ArduPlane/ArduPlane.cpp:411:       Log_Write_GPS(i);
ArduPlane/ArduPlane.cpp:804:       Log_Write_Baro();
ArduPlane/ArduPlane.cpp:870:       Log_Write_TECS_Tuning();
ArduPlane/ArduPlane.cpp:902:       Log_Write_Optflow();
ArduPlane/sensors.cpp:53:          Log_Write_Sonar();
ArduPlane/sensors.cpp:76:          Log_Write_Airspeed();

ArduPlane/ArduPlane.cpp:165:       DataFlash.Log_Write_IMUDT(ins);
ArduPlane/sensors.cpp:133:         DataFlash.Log_Write_RPM(rpm_sensor);
ArduPlane/commands_logic.cpp:12:   DataFlash.Log_Write_Mission_Cmd(mission, cmd);
ArduPlane/commands_logic.cpp:330:  DataFlash.Log_Write_Mode(control_mode);

ArduPlane/commands_logic.cpp:879:  Log_Write_Home_And_Origin();
ArduPlane/GCS_Mavlink.cpp:1454:    plane.Log_Write_Home_And_Origin();
ArduPlane/GCS_Mavlink.cpp:1894:    plane.Log_Write_Home_And_Origin();

ArduPlane/Log.cpp:57:              DataFlash.ListAvailableLogs(cliSerial);
ArduPlane/ArduPlane.cpp:269:       DataFlash.Log_Write_Vibration(ins);
ArduPlane/commands_logic.cpp:948:  DataFlash.Log_Write_Camera(ahrs, gps, current_loc);
ArduPlane/GCS_Mavlink.cpp:1604:    plane.DataFlash.Log_Write_EntireMission(plane.mission);
ArduPlane/GCS_Mavlink.cpp:2000:    DataFlash.Log_Write_Message(str);
ArduPlane/GCS_Mavlink.cpp:2018:    DataFlash.Log_Write_Message(gcs[0].pending_status.text);
ArduPlane/system.cpp:442:          DataFlash.Log_Write_Mode(control_mode);

ArduPlane/Log.cpp:23:MENU2(log_menu, "Log", log_menu_commands, FUNCTOR_BIND(&plane, &Plane::print_log_menu, bool));

Plane members
    bool print_log_menu(void);
    int8_t dump_log(uint8_t argc, const Menu::arg *argv);
    int8_t erase_logs(uint8_t argc, const Menu::arg *argv);
    int8_t select_logs(uint8_t argc, const Menu::arg *argv);
    int8_t process_logs(uint8_t argc, const Menu::arg *argv);


